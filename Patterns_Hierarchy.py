from abc import ABC, abstractmethod

# Классы для обработки запросов и базы данных системы


class Студент:
    def __init__(self, номер, имя, фамилия):
        self.номер = номер
        self.имя = имя
        self.фамилия = фамилия
        self.группа = None
        self.успеваемость = []

    def __str__(self):
        return f"{self.номер}: {self.имя} {self.фамилия}"


class Группа:
    def __init__(self, название):
        self.название = название
        self.студенты = []

    def добавить_студента(self, студент):
        студент.группа = self
        self.студенты.append(студент)

    def перевести_студента_в_другую_группу(self, студент, новая_группа):
        print(
            f"[Группа.перевести_студента_в_другую_группу] Переводим {студент} из группы {self.название} в {новая_группа.название}"
        )
        if студент in self.студенты:
            self.студенты.remove(студент)
            новая_группа.добавить_студента(студент)


class Курс:
    def __init__(self, название, количество_часов):
        self.название = название
        self.количество_часов = количество_часов


class Успеваемость:
    def __init__(self, курс, оценка):
        self.курс = курс
        self.оценка = оценка


# Интерфейс обработчика
class ОбработчикЗапроса(ABC):
    def __init__(self, имя):
        self._следующий_обработчик = None
        self.имя = имя

    def установить_следующий(self, обработчик):
        self._следующий_обработчик = обработчик
        return обработчик

    @abstractmethod
    def обработать_запрос(self, запрос):
        if self._следующий_обработчик:
            print(
                f"[{self.имя}.обработать_запрос] Запрос передается дальше в '{self._следующий_обработчик.имя}' через метод обработать_запрос."
            )
            return self._следующий_обработчик.обработать_запрос(запрос)
        print(
            f"[{self.имя}.обработать_запрос] Запрос '{запрос['тип']}' не может быть обработан. Конец цепочки."
        )
        return False


# Конкретные обработчики


class Аспирант(ОбработчикЗапроса):
    def обработать_запрос(self, запрос):
        print(
            f"[{self.имя}.обработать_запрос] Запрос типа '{запрос['тип']}' — {запрос['описание']}."
        )

        if запрос["тип"] == "помощь_с_курсом":
            print(f"{self.имя} обработал запрос: {запрос['описание']}.")
            return True
        return super().обработать_запрос(запрос)


class Преподаватель(ОбработчикЗапроса):
    def обработать_запрос(self, запрос):
        print(
            f"[{self.имя}.обработать_запрос] Запрос типа '{запрос['тип']}' — {запрос['описание']}."
        )

        if запрос["тип"] == "внесение_успеваемости":
            курс = запрос.get("курс")
            if курс:
                print(f"[Преподаватель.обработать_запрос] Найден курс: {курс.название}")

                студенты = запрос.get("студенты", [])
                for студент in студенты:
                    print(
                        f"[Преподаватель.обработать_запрос] Получен студент: {студент}"
                    )

                    оценка = запрос.get("оценка")
                    успеваемость = Успеваемость(курс, оценка)
                    студент.успеваемость.append(успеваемость)
                    print(
                        f"[Преподаватель.обработать_запрос] Успеваемость внесена для студента {студент}: курс {курс.название}, оценка {оценка}"
                    )

            return True
        return super().обработать_запрос(запрос)


class ЗаведующийКафедрой(ОбработчикЗапроса):
    def обработать_запрос(self, запрос):
        print(
            f"[{self.имя}.обработать_запрос] Запрос типа '{запрос['тип']}' — {запрос['описание']}."
        )

        if запрос["тип"] == "утверждение_учебной_программы":
            print(f"{self.имя} обработал запрос: {запрос['описание']}.")
            return True
        return super().обработать_запрос(запрос)


class Декан(ОбработчикЗапроса):
    def обработать_запрос(self, запрос):
        print(
            f"[{self.имя}.обработать_запрос] Запрос типа '{запрос['тип']}' — {запрос['описание']}."
        )

        if запрос["тип"] in ["перевод_группы", "генерация_отчета"]:
            if запрос["тип"] == "генерация_отчета":
                print(
                    f"[{self.имя}.обработать_запрос] Генерация отчета. Сбор данных о студентах и курсах..."
                )

                успеваемости = запрос.get("успеваемости", [])
                for успеваемость in успеваемости:
                    курс = успеваемость.курс
                    print(
                        f"[Декан.обработать_запрос] Информация о курсе: {курс.название}, часы: {курс.количество_часов}"
                    )

                    студент = запрос.get("студент")
                    if студент:
                        print(f"[Декан.обработать_запрос] Студент: {студент}")

            elif запрос["тип"] == "перевод_группы":
                студент = запрос.get("студент")
                if студент:
                    текущая_группа = студент.группа
                    print(
                        f"[Декан.обработать_запрос] Студент {студент} находится в группе {текущая_группа.название}"
                    )

                    новая_группа = запрос.get("новая_группа")
                    if новая_группа:
                        print(
                            f"[Декан.обработать_запрос] Переводим студента {студент} из группы {текущая_группа.название} в группу {новая_группа.название}"
                        )
                        текущая_группа.перевести_студента_в_другую_группу(
                            студент, новая_группа
                        )

            return True
        return super().обработать_запрос(запрос)


# Основной класс системы деканата
class СистемаДеканата:
    def __init__(self):
        # Создаем обработчиков
        self.асп = Аспирант("Аспирант")
        self.преп = Преподаватель("Преподаватель")
        self.зав_каф = ЗаведующийКафедрой("Заведующий кафедрой")
        self.декан = Декан("Декан")

        # Строим цепочку обязанностей
        self.асп.установить_следующий(self.преп).установить_следующий(
            self.зав_каф
        ).установить_следующий(self.декан)

    def обработать_запрос(self, тип, описание):
        запрос = {"тип": тип, "описание": описание}
        print(
            f"\n[СистемаДеканата] Создан запрос: '{запрос['тип']}' - {запрос['описание']}"
        )
        результат = self.асп.обработать_запрос(запрос)
        if результат:
            print(f"[СистемаДеканата] Запрос '{тип}' успешно обработан.\n")
        else:
            print(f"[СистемаДеканата] Запрос '{тип}' не был обработан.\n")

    def показать_меню(self):
        print("\nВыберите запрос:")
        print("1. Помощь с курсом")
        print("2. Внесение успеваемости")
        print("3. Утверждение учебной программы")
        print("4. Перевод студента в другую группу")
        print("5. Генерация отчета")
        print("0. Выход")


# Клиентский код
if __name__ == "__main__":
    # Создание студентов и групп
    студент1 = Студент(1, "Иван", "Иванов")
    студент2 = Студент(2, "Петр", "Петров")
    группа1 = Группа("Группа 1")
    группа2 = Группа("Группа 2")
    группа1.добавить_студента(студент1)
    группа1.добавить_студента(студент2)

    курс1 = Курс("Математика", 40)
    курс2 = Курс("Физика", 35)
    успеваемость1 = Успеваемость(курс1, 5)
    успеваемость2 = Успеваемость(курс2, 4)

    студент1.успеваемость.append(успеваемость1)
    студент2.успеваемость.append(успеваемость2)

    система = СистемаДеканата()

    while True:
        система.показать_меню()
        выбор = input("Введите номер запроса: ").strip()

        if выбор == "1":
            система.обработать_запрос(
                "помощь_с_курсом", "Нужна помощь с материалом курса."
            )
        elif выбор == "2":
            система.обработать_запрос(
                "внесение_успеваемости", "Добавить оценки для группы."
            )
        elif выбор == "3":
            система.обработать_запрос(
                "утверждение_учебной_программы", "Программа для кафедры."
            )
        elif выбор == "4":
            система.обработать_запрос(
                "перевод_группы", "Перевести студента в другую группу."
            )
            # Перевод студента из группы 1 в группу 2
            группа1.перевести_студента_в_другую_группу(студент1, группа2)
            print(f"Студент {студент1} переведен в {группа2.название}.")
        elif выбор == "5":
            система.обработать_запрос(
                "генерация_отчета", "Создать отчет по успеваемости."
            )
        elif выбор == "0":
            print("Выход из программы.")
            break
        else:
            print("Неверный выбор. Попробуйте снова.\n")
